module ietf-yang-push-telemetry-message {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:ietf-yang-push-telemetry-message";
  prefix yptm;

  import ietf-subscribed-notifications {
    prefix sn;
    reference
      "RFC 8639: Subscription to YANG Notifications";
  }
  import ietf-telemetry-message {
    prefix tm;
    reference
      "XXX";
  }
  import ietf-yang-push-revision {
    prefix ypr;
    reference
      "XXX";
  }
  import ietf-yang-push {
    prefix yp;
    reference
      "RFC 8641: Subscription to YANG Notifications for Datastore Updates";
  }
  import ietf-yang-types {
    prefix yang;
    reference
      "RFC 6991: Common YANG Data Types";
  }
  import ietf-datastores {
    prefix ds;
    reference
      "RFC 8342: Network Management Datastore Architecture (NMDA)";
  }

  organization
    "IETF Draft";
  contact
    "Author:    Ahmed Elhassany
                <mailto:ahmed.elhassany@swisscom.com>

                Thomas Graf
                <mailto:thomas.graf@swisscom.com>";
  description
    "Augments the ietf-telemetry-message with YANG Push specific
     fields.

     Copyright (c) 2025 IETF Trust and the persons identified as
       authors of the code.  All rights reserved.

     Redistribution and use in source and binary forms, with or without
     modification, is permitted pursuant to, and subject to the license
     terms contained in, the Revised BSD License set forth in Section
     4.c of the IETF Trust's Legal Provisions Relating to IETF Documents
     (https://trustee.ietf.org/license-info).

     This version of this YANG module is part of RFC XXXX; see the RFC
     itself for full legal notices.";

  revision 2025-04-17 {
    description
      "Initial revision.";
    reference
      "RFC XXXX";
  }

  identity notification-protocol {
    description
      "Base identity to represent YANG-Push notification protocols.";
  }

  identity yp-dynamic {
    base notification-protocol;
    description
      "YANG-Push Dynamic Subscription as described in RFC 8640 or RFC 8650.";
    reference
      "RFC 8640, RFC 8650: Dynamic Subscription to YANG Events and
       Datastores over NETCONF or RESTCONF.";
  }

  identity yp-configured {
    base notification-protocol;
    description
      "YANG-Push Configured Subscription as described in RFC 8641.";
    reference
      "RFC 8641: Subscription to YANG Notifications for Datastore Updates.";
  }

  augment "/tm:message/tm:telemetry-message-metadata" {
    description
      "Augments telemetry-message-metadata with YANG-Push specific metadata";
    container yang-push-subscription {
      config false;
      description
        "YANG-Push specific metadata";
      leaf id {
        type sn:subscription-id;
        description
          "This references the affected subscription.";
      }
      //uses sn:subscription-policy;
      choice target {
        mandatory true;
        description
          "Identifies the source of information against which a
           subscription is being applied as well as specifics on the
           subset of information desired from that source.";
        case stream {
          choice stream-filter {
            description
              "This grouping defines the base for filters applied to event
               streams.";
            choice stream-filter-spec {
              description
                "The content filter specification for this request.";
              anydata stream-subtree-filter {
                description
                  "Event stream evaluation criteria encoded in the syntax of
                   a subtree filter as defined in RFC 6241, Section 6.

                   The subtree filter is applied to the representation of
                   individual, delineated event records as contained in the
                   event stream.

                   If the subtree filter returns a non-empty node set, the
                   filter matches the event record, and the event record is
                   included in the notification message sent to the
                   receivers.";
                reference
                  "RFC 6241: Network Configuration Protocol (NETCONF),
                            Section 6";
              }
              leaf stream-xpath-filter {
                type yang:xpath1.0;
                description
                  "Event stream evaluation criteria encoded in the syntax of
                   an XPath 1.0 expression.

                   The XPath expression is evaluated on the representation of
                   individual, delineated event records as contained in
                   the event stream.

                   The result of the XPath expression is converted to a
                   boolean value using the standard XPath 1.0 rules.  If the
                   boolean value is 'true', the filter matches the event
                   record, and the event record is included in the
                   notification message sent to the receivers.

                   The expression is evaluated in the following XPath
                   context:

                      o  The set of namespace declarations is the set of
                        prefix and namespace pairs for all YANG modules
                        implemented by the server, where the prefix is the
                        YANG module name and the namespace is as defined by
                        the 'namespace' statement in the YANG module.

                        If the leaf is encoded in XML, all namespace
                        declarations in scope on the 'stream-xpath-filter'
                        leaf element are added to the set of namespace
                        declarations.  If a prefix found in the XML is
                        already present in the set of namespace
                        declarations, the namespace in the XML is used.

                      o  The set of variable bindings is empty.

                      o  The function library is comprised of the core
                        function library and the XPath functions defined in
                        Section 10 in RFC 7950.

                      o  The context node is the root node.";
                reference
                  "XML Path Language (XPath) Version 1.0
                   (https://www.w3.org/TR/1999/REC-xpath-19991116)
                   RFC 7950: The YANG 1.1 Data Modeling Language,
                            Section 10";
              }
            }
            leaf replay-start-time {
              type yang:date-and-time;
              config false;
              description
                "Used to trigger the 'replay' feature for a dynamic
                  subscription, where event records that are selected
                  need to be at or after the specified starting time.  If
                  'replay-start-time' is not present, this is not a replay
                  subscription and event record push should start
                  immediately.  It is never valid to specify start times
                  that are later than or equal to the current time.";
            }
          }
        }
        case datastore {
          leaf datastore {
            type identityref {
              base ds:datastore;
            }
            mandatory true;
            description
              "Datastore from which to retrieve data.";
          }
          choice datastore-filter-spec {
            description
              "The content filter specification for this request.";
            anydata datastore-subtree-filter {
              description
                "This parameter identifies the portions of the
                 target datastore to retrieve.";
              reference
                "RFC 6241: Network Configuration Protocol, Section 6.";
            }
            leaf datastore-xpath-filter {
              type yang:xpath1.0;
              description
                "This parameter contains an XPath expression identifying
                 the portions of the target datastore to retrieve.

                 If the expression returns a node-set, all nodes in the
                 node-set are selected by the filter.  Otherwise, if the
                 expression does not return a node-set, the filter
                 doesn't select any nodes.

                 The expression is evaluated in the following XPath
                 context:

                  o   The set of namespace declarations is the set of prefix
                      and namespace pairs for all YANG modules implemented
                      by the server, where the prefix is the YANG module
                      name and the namespace is as defined by the
                      'namespace' statement in the YANG module.

                      If the leaf is encoded in XML, all namespace
                      declarations in scope on the 'stream-xpath-filter'
                      leaf element are added to the set of namespace
                      declarations.  If a prefix found in the XML is
                      already present in the set of namespace declarations,
                      the namespace in the XML is used.

                  o  The set of variable bindings is empty.

                  o  The function library is the core function library, and
                    the XPath functions defined in section 10 in RFC 7950.

                  o  The context node is the root node of the target
                    datastore.";
            }
          }
        }
      }
      leaf stop-time {
        type yang:date-and-time;
        description
          "Identifies a time after which notification messages for a
           subscription should not be sent.  If 'stop-time' is not
           present, the notification messages will continue until the
           subscription is terminated.  If 'replay-start-time' exists,
           'stop-time' must be for a subsequent time.  If
           'replay-start-time' doesn't exist, 'stop-time', when
           established, must be for a future time.";
      }
      leaf transport {
        type sn:transport;
        description
          "For a configured subscription, this leaf specifies the
           transport used to deliver messages destined for all
           receivers of that subscription.";
      }
      leaf encoding {
        type sn:encoding;
        description
          "The type of encoding for notification messages.  For a
           dynamic subscription, if not included as part of an
           'establish-subscription' RPC, the encoding will be populated
           with the encoding used by that RPC.  For a configured
           subscription, if not explicitly configured, the encoding
           will be the default encoding for an underlying transport.";
      }
      leaf purpose {
        type string;
        description
          "Open text allowing a configuring entity to embed the
           originator or other specifics of this subscription.";
      }
      // do we need to add sn:update-qos
      choice update-trigger {
        description
          "Defines necessary conditions for sending an event record to
           the subscriber.";
        case periodic {
          container periodic {
            presence "indicates a periodic subscription";
            description
              "The publisher is requested to notify periodically the
               current values of the datastore as defined by the
               selection filter.";
            leaf period {
              type yp:centiseconds;
              mandatory true;
              description
                "Duration of time which should occur between periodic
                 push updates, in one hundredths of a second.";
            }
            leaf anchor-time {
              type yang:date-and-time;
              description
                "Designates a timestamp before or after which a series
                 of periodic push updates are determined. The next
                 update will take place at a whole multiple interval
                 from the anchor time.  For example, for an anchor time
                 is set for the top of a particular minute and a period
                 interval of a minute, updates will be sent at the top
                 of every minute this subscription is active.";
            }
          }
        }
        case on-change {
          container on-change {
            presence "indicates an on-change subscription";
            description
              "The publisher is requested to notify changes in values
               in the datastore subset as defined by a selection
               filter.";
            leaf dampening-period {
              type yp:centiseconds;
              default "0";
              description
                "Specifies the minimum interval between the assembly of
                 successive update records for a single receiver of a
                 subscription.  Whenever subscribed objects change, and
                 a dampening period interval (which may be zero) has
                 elapsed since the previous update record creation for
                 a receiver, then any subscribed objects and properties
                 which have changed since the previous update record
                 will have their current values marshalled and placed
                 into a new update record.";
            }
            leaf sync-on-start {
              type boolean;
              default "true";
              description
                "When this object is set to false, it restricts an
                 on-change subscription from sending push-update
                 notifications.  When false, pushing a full selection per
                 the terms of the selection filter MUST NOT be done for
                 this subscription.  Only updates about changes,
                 i.e. only push-change-update notifications are sent.
                 When true (default behavior), in order to facilitate a
                 receiver's synchronization, a full update is sent when
                 the subscription starts using a push-update
                 notification.  After that, push-change-update
                 notifications are exclusively sent unless the publisher
                 chooses to resync the subscription via a new push-update
                 notification.";
            }
            leaf-list excluded-change {
              type yp:change-type;
              description
                "Use to restrict which changes trigger an update.  For
                 example, if modify is excluded, only creation and
                 deletion of objects is reported.";
            }
          }
        }
      }
      list module-version {
        key "module-name";
        description
          "List of yang-push-module-version grouping. The revision is
           not configurable.";
        uses ypr:yang-push-module-version;
      }
      leaf yang-library-content-id {
        type string;
        description
          "Contains the YANG library content identifier RFC 8525
           information.";
      }
    }
  }
}
