module ietf-telemetry-message {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:telemetry-message";
  prefix tm;

  import ietf-yang-types {
    prefix yang;
  }
  import ietf-inet-types {
    prefix inet;
  }
  import ietf-platform-manifest {
    prefix p-mf;
    reference
      "draft-ietf-opsawg-collected-data-manifest: A Data Manifest for
      Contextualized Telemetry Data";
  }

  organization
    "IETF Draft";
  contact
    "Author:    Ahmed Elhassany
                <mailto:ahmed.elhassany@swisscom.com>

                Thomas Graf
                <mailto:thomas.graf@swisscom.com>";
  description
    "This YANG modules defines a model for a telemetry collector to send
     collected YANG data from the network.

     Copyright (c) 2025 IETF Trust and the persons identified as
       authors of the code.  All rights reserved.

     Redistribution and use in source and binary forms, with or without
     modification, is permitted pursuant to, and subject to the license
     terms contained in, the Revised BSD License set forth in Section
     4.c of the IETF Trust's Legal Provisions Relating to IETF Documents
     (https://trustee.ietf.org/license-info).

     This version of this YANG module is part of RFC XXXX; see the RFC
     itself for full legal notices.";

  revision 2025-04-17 {
    description
      "Initial revision.";
    reference
      "RFC XXXX";
  }

  identity notification-protocol {
    description
      "Base identity to represent notification protocols.";
  }

  identity yp-dynamic {
    base notification-protocol;
    description
      "YANG-Push Dynamic Subscription as described in RFC 8640 or
			RFC 8650.";
    reference
      "RFC 8640, RFC 8650: Dynamic Subscription to YANG Events and
			Datastores over NETCONF or RESTCONF.";
  }
	
  identity yp-configured {
    base notification-protocol;
    description
      "YANG-Push Configured Subscription as described in RFC 8641.";
    reference
      "RFC 8641: Subscription to YANG Notifications for Datastore
			Updates.";
  }

  identity netconf-get {
    base notification-protocol;
    description
      "NETCONF <get> RPC as described in RFC 6241.";
    reference
      "RFC 6241: <get> RPC.";
  }
	
  identity restconf-get {
    base notification-protocol;
    description
      "RESTCONF HTTP GET as described in RFC 8040.";
    reference
      "RFC 8040: HTTP GET.";
  }

  identity transport {
    description
      "Base identity to represent notification transport protocols.";
  }

  identity netconf {
    base transport;
		base netconf-get;
    base yp-dynamic;		
    description
      "Network Configuration Protocol as described in RFC 6241.";
    reference
      "RFC 6241: Network Configuration Protocol.";
  }
	
  identity restconf {
    base transport;
		base restconf-get;
    base yp-dynamic;
    description
      "RESTCONF Protocol as described in RFC 8040.";
    reference
      "RFC 8040: RESTCONF Protocol.";
  }

  identity udp-notif {
    base transport;
    base yp-configured;
    description
      "YANG-Push configured subscription transport protocol
			as described in draft-ietf-netconf-udp-notif.";
    reference
      "draft-ietf-netconf-udp-notif: UDP-based Transport for Configured
			Subscriptions.";
  }

  identity https-notif {
    base transport;
    base yp-configured;
    description
      "YANG-Push configured subscription transport protocol
			as described in draft-ietf-netconf-https-notif.";
    reference
      "draft-ietf-netconf-https-notif: An HTTPS-based Transport forÂ¨
			YANG Notifications.";
  }

  identity encoding {
    description
      "Base identity to represent notification encodings.";
  }

  identity cbor {
    base encoding;
    description
      "Encoded data using CBOR as described in RFC 9254.";
    reference
      "RFC 9254: CBOR Encoding of Data Modeled with YANG";
  }
 
  identity xml {
    base encoding;
    description
      "Encoded data using XML as described in RFC 7950.";
    reference
      "RFC 7950: The YANG 1.1 Data Modeling Language";
  }
 
  identity json {
    base encoding;
    description
      "Encoded data using JSON as described in RFC 7951.";
    reference
      "RFC 7951: JSON Encoding of Data Modeled with YANG";
  }

  typedef telemetry-notification-event-type {
    type enumeration {
      enum "log" {
        description
          "Collector is reporting the event as it arrived from the
          network element.";
      }
      enum "update" {
        description
          "
           Collector has updated an entry inside its local cache.
           This could be triggered by an event from the network for
           instance interface operational status changed or an internal
           event in the collector, such as a timer triggered to referesh
           old enteries.";
      }
      enum "delete" {
        description
          "Collector has deleted an entry from its local cache.";
      }
    }
    description
      "Type of event reported by the collector.";
  }

  typedef telemetry-notification-protocol-type {
    type identityref {
      base notification-protocol;
    }
    description
      "Notification protocol used to deliver the notification to the
      data collection.";
  }

  typedef telemetry-notification-encoding-type {
    type identityref {
      base encoding;
    }
    description
      "Notification encoding used to deliver the notification to the
      data collection.";
  }

  typedef telemetry-notification-transport-type {
    type identityref {
      base transport;
    }
    description
      "Notification transport protocol used to deliver the notification
			to the data collection.";
  }

  container notification {
    config false;
    leaf timestamp {
      type yang:date-and-time;
      mandatory true;
      description
        "Timestamp when the data collection received the notification
        from the network element or an update or delete event is
        triggered.";
    }
    leaf notification-protocol {
      type telemetry-notification-protocol-type;
      mandatory true;
      description
        "Notification protocol used to send the notification from
        network node to the data collection.";
    }
    leaf notification-encoding {
      type telemetry-notification-encoding-type;
      mandatory true;
      description
        "Encoding used to send the notification from network node to the
				data collection.";
    }		
    leaf notification-transport {
      type telemetry-notification-transport-type;
      mandatory true;
      description
        "Notofication transport protocol used to send the notification
				from network node to the data collection.";
    }
    container network-node-manifest {
      description
        "Address of network element sent the notification.";
      uses p-mf:platform-details;
    }
    container data-collection-manifest {
      description
        "Address of the telemetry data collection.";
      uses p-mf:platform-details;
    }
    container telemetry-notification-metadata {
      leaf event-time {
        type yang:date-and-time;
        mandatory false;
        description
          "NETCONF eventTime. Redefined in here since NETCONF header is
          XML not YANG.";
      }
    }
    container data-collection-metadata {
      description
        "Metadata added by data collection.";
      leaf remote-address {
        type inet:host;
        mandatory true;
        description
          "Network node IP address.";
      }
      leaf remote-port {
        type inet:port-number;
        description
          "Network node transport port number.";
      }
      leaf local-address {
        type inet:host;
        description
          "Data collection IP address.";
      }
      leaf local-port {
        type inet:port-number;
        description
          "Data collection transport port number.";
      }			
      list labels {
        key "name";
        description
          "Arbiterary labels assinged by the data collection.";
        leaf name {
          type string {
            length "1..max";
          }
          description
            "Label name.";
        }
        choice value {
          mandatory true;
          choice string-value {
            leaf string-values {
              type string;
            }
          }
          choice anydata-value {
            anydata anydata-values {
              description
                "anydata yang";
            }
          }
        }
      }
    }
    anydata payload {
      description
        "Notification received from network element.";
    }
  }
}
